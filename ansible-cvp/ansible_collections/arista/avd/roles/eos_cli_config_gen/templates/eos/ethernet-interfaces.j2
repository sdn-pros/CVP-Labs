{# eos - ethernet interfaces #}
{% for ethernet_interface in ethernet_interfaces | arista.avd.natural_sort('name') %}
{%     if ethernet_interface.channel_group.id is arista.avd.defined and ethernet_interface.channel_group.mode is arista.avd.defined %}
{%         set port_channel_interface_name = 'Port-Channel' ~ ethernet_interface.channel_group.id %}
{%         if port_channel_interfaces | arista.avd.default([]) |
                                        arista.avd.convert_dicts('name') |
                                        selectattr('name', 'arista.avd.defined', port_channel_interface_name) |
                                        selectattr('lacp_fallback_mode', 'arista.avd.defined', 'individual') |
                                        length > 0 %}
{%             set print_ethernet = true %}
{%         endif %}
{%     else %}
{%         set print_ethernet = true %}
{%     endif %}
!
interface {{ ethernet_interface.name }}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.profile is arista.avd.defined %}
   profile {{ ethernet_interface.profile }}
{%         endif %}
{%     endif %}
{%     if ethernet_interface.description is arista.avd.defined %}
   description {{ ethernet_interface.description }}
{%     endif %}
{%     if ethernet_interface.shutdown is arista.avd.defined(true) %}
   shutdown
{%     elif ethernet_interface.shutdown is arista.avd.defined(false) %}
   no shutdown
{%     endif %}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.mtu is arista.avd.defined %}
   mtu {{ ethernet_interface.mtu }}
{%         endif %}
{%     endif %}
{%     if ethernet_interface.logging.event is arista.avd.defined %}
{%         if ethernet_interface.logging.event.link_status is arista.avd.defined(true) %}
   logging event link-status
{%         elif ethernet_interface.logging.event.link_status is arista.avd.defined(false) %}
   no logging event link-status
{%         endif %}
{%         if ethernet_interface.logging.event.congestion_drops is arista.avd.defined(true) %}
   logging event congestion-drops
{%         elif ethernet_interface.logging.event.congestion_drops is arista.avd.defined(false) %}
   no logging event congestion-drops
{%         endif %}
{%     endif %}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.flowcontrol.received is arista.avd.defined %}
   flowcontrol receive {{ ethernet_interface.flowcontrol.received }}
{%         endif %}
{%     endif %}
{%     if ethernet_interface.speed is arista.avd.defined %}
   speed {{ ethernet_interface.speed }}
{%     endif %}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.l2_mtu is arista.avd.defined %}
   l2 mtu {{ ethernet_interface.l2_mtu }}
{%         endif %}
{%     endif %}
{%     if ethernet_interface.mac_security.profile is arista.avd.defined %}
   mac security profile {{ ethernet_interface.mac_security.profile }}
{%     endif %}
{%     if ethernet_interface.error_correction_encoding.enabled is arista.avd.defined(false) %}
   no error-correction encoding
{%     else %}
{%         if ethernet_interface.error_correction_encoding.fire_code is arista.avd.defined(true) %}
   error-correction encoding fire-code
{%         elif ethernet_interface.error_correction_encoding.fire_code is arista.avd.defined(false) %}
   no error-correction encoding fire-code
{%         endif %}
{%         if ethernet_interface.error_correction_encoding.reed_solomon is arista.avd.defined(true) %}
   error-correction encoding reed-solomon
{%         elif ethernet_interface.error_correction_encoding.reed_solomon is arista.avd.defined(false) %}
   no error-correction encoding reed-solomon
{%         endif %}
{%     endif %}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.mode is arista.avd.defined('access') or ethernet_interface.mode is arista.avd.defined('dot1q-tunnel') %}
{%             if ethernet_interface.vlans is arista.avd.defined %}
   switchport access vlan {{ ethernet_interface.vlans }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.mode is arista.avd.defined and ethernet_interface.mode in ['trunk', 'trunk phone'] %}
{%             if ethernet_interface.native_vlan_tag is arista.avd.defined(true) %}
   switchport trunk native vlan tag
{%             elif ethernet_interface.native_vlan is arista.avd.defined %}
   switchport trunk native vlan {{ ethernet_interface.native_vlan }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.phone.vlan is arista.avd.defined %}
   switchport phone vlan {{ ethernet_interface.phone.vlan }}
{%         endif %}
{%         if ethernet_interface.phone.trunk is arista.avd.defined %}
   switchport phone trunk {{ ethernet_interface.phone.trunk }}
{%         endif %}
{%         for vlan_translation in ethernet_interface.vlan_translations | arista.avd.natural_sort %}
{%             if vlan_translation.from is arista.avd.defined and vlan_translation.to is arista.avd.defined %}
{%                 set vlan_translation_cli = 'switchport vlan translation' %}
{%                 if vlan_translation.direction | arista.avd.default in ['in', 'out'] %}
{%                     set vlan_translation_cli = vlan_translation_cli ~ ' ' ~ vlan_translation.direction %}
{%                 endif %}
{%                 set vlan_translation_cli = vlan_translation_cli ~ ' ' ~ vlan_translation.from %}
{%                 set vlan_translation_cli = vlan_translation_cli ~ ' ' ~ vlan_translation.to %}
   {{ vlan_translation_cli }}
{%             endif %}
{%         endfor %}
{%         if ethernet_interface.mode is arista.avd.defined('trunk') %}
{%             if ethernet_interface.vlans is arista.avd.defined %}
   switchport trunk allowed vlan {{ ethernet_interface.vlans }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.mode is arista.avd.defined %}
   switchport mode {{ ethernet_interface.mode }}
{%         endif %}
{%         for trunk_group in ethernet_interface.trunk_groups | arista.avd.natural_sort %}
   switchport trunk group {{ trunk_group }}
{%         endfor %}
{%         if ethernet_interface.type is arista.avd.defined('routed') %}
   no switchport
{%         elif ethernet_interface.type | arista.avd.default in ['l3dot1q', 'l2dot1q'] %}
{%             if ethernet_interface.vlan_id is arista.avd.defined and
                  ethernet_interface.type == 'l2dot1q' %}
   vlan id {{ ethernet_interface.vlan_id }}
{%             endif %}
{%             if ethernet_interface.encapsulation_dot1q_vlan is arista.avd.defined %}
   encapsulation dot1q vlan {{ ethernet_interface.encapsulation_dot1q_vlan }}
{%             elif ethernet_interface.encapsulation_vlan.client.dot1q.vlan is arista.avd.defined() %}
{%                 set encapsulation_cli = "client dot1q " ~ ethernet_interface.encapsulation_vlan.client.dot1q.vlan %}
{%                 if ethernet_interface.encapsulation_vlan.network.dot1q.vlan is arista.avd.defined() %}
{%                     set encapsulation_cli = encapsulation_cli ~ " network dot1q " ~ ethernet_interface.encapsulation_vlan.network.dot1q.vlan %}
{%                 elif ethernet_interface.encapsulation_vlan.network.client is arista.avd.defined(true) %}
{%                     set encapsulation_cli = encapsulation_cli ~ " network client" %}
{%                 endif %}
{%             elif ethernet_interface.encapsulation_vlan.client.dot1q.inner is arista.avd.defined and ethernet_interface.encapsulation_vlan.client.dot1q.outer is arista.avd.defined %}
{%                 set encapsulation_cli = "client dot1q outer " ~ ethernet_interface.encapsulation_vlan.client.dot1q.outer ~ " inner " ~ ethernet_interface.encapsulation_vlan.client.dot1q.inner %}
{%                 if ethernet_interface.encapsulation_vlan.network.dot1q.inner is arista.avd.defined and ethernet_interface.encapsulation_vlan.network.dot1q.outer is arista.avd.defined %}
{%                     set encapsulation_cli = encapsulation_cli ~ " network dot1q outer " ~ ethernet_interface.encapsulation_vlan.network.dot1q.inner ~ " inner " ~ ethernet_interface.encapsulation_vlan.network.dot1q.outer %}
{%                 elif ethernet_interface.encapsulation_vlan.network.dot1q.client is arista.avd.defined(true) %}
{%                     set encapsulation_cli = encapsulation_cli ~ " network client" %}
{%                 endif %}
{%             elif ethernet_interface.encapsulation_vlan.client.unmatched is arista.avd.defined(true) %}
{%                 set encapsulation_cli = "client unmatched" %}
{%             endif %}
{%             if encapsulation_cli is arista.avd.defined %}
   encapsulation vlan
      {{ encapsulation_cli }}
{%             endif %}
{%         else %}
   switchport
{%         endif %}
{%         if ethernet_interface.trunk_private_vlan_secondary is arista.avd.defined(true) %}
   switchport trunk private-vlan secondary
{%         elif ethernet_interface.trunk_private_vlan_secondary is arista.avd.defined(false) %}
   no switchport trunk private-vlan secondary
{%         endif %}
{%         if ethernet_interface.pvlan_mapping is arista.avd.defined %}
   switchport pvlan mapping {{ ethernet_interface.pvlan_mapping }}
{%         endif %}
{%         if ethernet_interface.l2_protocol.encapsulation_dot1q_vlan is arista.avd.defined %}
   l2-protocol encapsulation dot1q vlan {{ ethernet_interface.l2_protocol.encapsulation_dot1q_vlan }}
{%         endif %}
{%         if ethernet_interface.flow_tracker.sampled is arista.avd.defined %}
   flow tracker sampled {{ ethernet_interface.flow_tracker.sampled }}
{%         endif %}
{%         if ethernet_interface.evpn_ethernet_segment is arista.avd.defined %}
   evpn ethernet-segment
{%             if ethernet_interface.evpn_ethernet_segment.identifier is arista.avd.defined %}
      identifier {{ ethernet_interface.evpn_ethernet_segment.identifier }}
{%             endif %}
{%             if ethernet_interface.evpn_ethernet_segment.redundancy is arista.avd.defined %}
      redundancy {{ ethernet_interface.evpn_ethernet_segment.redundancy }}
{%             endif %}
{%             if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election is arista.avd.defined %}
{%                 if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.algorithm is arista.avd.defined("modulus") %}
      designated-forwarder election algorithm modulus
{%                 elif ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.algorithm is arista.avd.defined("preference") and ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.preference_value is arista.avd.defined %}
{%                     set dfe_algo_cli = "designated-forwarder election algorithm preference " ~ ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.preference_value %}
{%                     if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.dont_preempt is arista.avd.defined(true) %}
{%                         set dfe_algo_cli = dfe_algo_cli ~ " dont-preempt" %}
{%                     endif %}
      {{ dfe_algo_cli }}
{%                 endif %}
{%                 if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.hold_time is arista.avd.defined %}
{%                     set dfe_hold_time_cli = "designated-forwarder election hold-time " ~ ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.hold_time %}
{%                     if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.subsequent_hold_time is arista.avd.defined %}
{%                         set dfe_hold_time_cli = dfe_hold_time_cli ~ " subsequent-hold-time " ~ ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.subsequent_hold_time %}
{%                     endif %}
      {{ dfe_hold_time_cli }}
{%                 endif %}
{%                 if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.candidate_reachability_required is arista.avd.defined(true) %}
      designated-forwarder election candidate reachability required
{%                 elif ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.candidate_reachability_required is arista.avd.defined(false) %}
      no designated-forwarder election candidate reachability required
{%                 endif %}
{%             endif %}
{%             if ethernet_interface.evpn_ethernet_segment.mpls.tunnel_flood_filter_time is arista.avd.defined %}
      mpls tunnel flood filter time {{ ethernet_interface.evpn_ethernet_segment.mpls.tunnel_flood_filter_time }}
{%             endif %}
{%             if ethernet_interface.evpn_ethernet_segment.mpls.shared_index is arista.avd.defined %}
      mpls shared index {{ ethernet_interface.evpn_ethernet_segment.mpls.shared_index }}
{%             endif %}
{%             if ethernet_interface.evpn_ethernet_segment.route_target is arista.avd.defined %}
      route-target import {{ ethernet_interface.evpn_ethernet_segment.route_target }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.dot1x is arista.avd.defined %}
{%             if ethernet_interface.dot1x.pae.mode is arista.avd.defined %}
   dot1x pae {{ ethernet_interface.dot1x.pae.mode }}
{%             endif %}
{%             if ethernet_interface.dot1x.authentication_failure is arista.avd.defined %}
{%                 if ethernet_interface.dot1x.authentication_failure.action is arista.avd.defined('allow') and
                      ethernet_interface.dot1x.authentication_failure.allow_vlan is arista.avd.defined %}
   dot1x authentication failure action traffic allow vlan {{ ethernet_interface.dot1x.authentication_failure.allow_vlan }}
{%                 elif ethernet_interface.dot1x.authentication_failure.action is arista.avd.defined('drop') %}
   dot1x authentication failure action traffic drop
{%                 endif %}
{%             endif %}
{%             if ethernet_interface.dot1x.reauthentication is arista.avd.defined(true) %}
   dot1x reauthentication
{%             endif %}
{%             if ethernet_interface.dot1x.port_control is arista.avd.defined %}
   dot1x port-control {{ ethernet_interface.dot1x.port_control }}
{%             endif %}
{%             if ethernet_interface.dot1x.port_control_force_authorized_phone is arista.avd.defined(true) %}
   dot1x port-control force-authorized phone
{%             elif ethernet_interface.dot1x.port_control_force_authorized_phone is arista.avd.defined(false) %}
   no dot1x port-control force-authorized phone
{%             endif %}
{%             if ethernet_interface.dot1x.host_mode is arista.avd.defined %}
{%                 if ethernet_interface.dot1x.host_mode.mode is arista.avd.defined('single-host') %}
   dot1x host-mode single-host
{%                 elif ethernet_interface.dot1x.host_mode.mode is arista.avd.defined('multi-host') %}
{%                     set host_mode_cli = "dot1x host-mode multi-host" %}
{%                     if ethernet_interface.dot1x.host_mode.multi_host_authenticated is arista.avd.defined(true) %}
{%                         set host_mode_cli = host_mode_cli ~ " authenticated" %}
{%                     endif %}
   {{ host_mode_cli }}
{%                 endif %}
{%             endif %}
{%             if ethernet_interface.dot1x.mac_based_authentication.enabled is arista.avd.defined(true) %}
{%                 if ethernet_interface.dot1x.mac_based_authentication.host_mode_common is arista.avd.defined(true) %}
   dot1x mac based authentication host-mode common
{%                     if ethernet_interface.dot1x.mac_based_authentication.always is arista.avd.defined(true) %}
   dot1x mac based authentication always
{%                     endif %}
{%                 else %}
{%                     set auth_cli = "dot1x mac based authentication" %}
{%                     if ethernet_interface.dot1x.mac_based_authentication.always is arista.avd.defined(true) %}
{%                         set auth_cli = auth_cli ~ " always" %}
{%                     endif %}
   {{ auth_cli }}
{%                 endif %}
{%             endif %}
{%             if ethernet_interface.dot1x.timeout is arista.avd.defined %}
{%                 if ethernet_interface.dot1x.timeout.quiet_period is arista.avd.defined %}
   dot1x timeout quiet-period {{ ethernet_interface.dot1x.timeout.quiet_period }}
{%                 endif %}
{%                 if ethernet_interface.dot1x.timeout.reauth_timeout_ignore is arista.avd.defined(true) %}
   dot1x timeout reauth-timeout-ignore always
{%                 endif %}
{%                 if ethernet_interface.dot1x.timeout.tx_period is arista.avd.defined %}
   dot1x timeout tx-period {{ ethernet_interface.dot1x.timeout.tx_period }}
{%                 endif %}
{%                 if ethernet_interface.dot1x.timeout.reauth_period is arista.avd.defined %}
   dot1x timeout reauth-period {{ ethernet_interface.dot1x.timeout.reauth_period }}
{%                 endif %}
{%                 if ethernet_interface.dot1x.timeout.idle_host is arista.avd.defined %}
   dot1x timeout idle-host {{ ethernet_interface.dot1x.timeout.idle_host }} seconds
{%                 endif %}
{%             endif %}
{%             if ethernet_interface.dot1x.reauthorization_request_limit is arista.avd.defined %}
   dot1x reauthorization request limit {{ ethernet_interface.dot1x.reauthorization_request_limit }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.snmp_trap_link_change is arista.avd.defined(false) %}
   no snmp trap link-change
{%         elif ethernet_interface.snmp_trap_link_change is arista.avd.defined(true) %}
   snmp trap link-change
{%         endif %}
{%         if ethernet_interface.vrf is arista.avd.defined %}
   vrf {{ ethernet_interface.vrf }}
{%         endif %}
{%         if ethernet_interface.ip_proxy_arp is arista.avd.defined(true) %}
   ip proxy-arp
{%         endif %}
{%         if ethernet_interface.ip_address is arista.avd.defined %}
   ip address {{ ethernet_interface.ip_address }}
{%             if ethernet_interface.ip_address_secondaries is arista.avd.defined %}
{%                 for ip_address_secondary in ethernet_interface.ip_address_secondaries %}
   ip address {{ ip_address_secondary }} secondary
{%                 endfor %}
{%             endif %}
{%             for ip_helper in ethernet_interface.ip_helpers | arista.avd.natural_sort('ip_helper') %}
{%                 set ip_helper_cli = "ip helper-address " ~ ip_helper.ip_helper %}
{%                 if ip_helper.vrf is arista.avd.defined %}
{%                     set ip_helper_cli = ip_helper_cli ~ " vrf " ~ ip_helper.vrf %}
{%                 endif %}
{%                 if ip_helper.source_interface is arista.avd.defined %}
{%                     set ip_helper_cli = ip_helper_cli ~ " source-interface " ~ ip_helper.source_interface %}
{%                 endif %}
   {{ ip_helper_cli }}
{%             endfor %}
{%         endif %}
{%         if ethernet_interface.bfd.interval is arista.avd.defined and
              ethernet_interface.bfd.min_rx is arista.avd.defined and
              ethernet_interface.bfd.multiplier is arista.avd.defined %}
   bfd interval {{ ethernet_interface.bfd.interval }} min-rx {{ ethernet_interface.bfd.min_rx }} multiplier {{ ethernet_interface.bfd.multiplier }}
{%         endif %}
{%         if ethernet_interface.bfd.echo is arista.avd.defined(true) %}
   bfd echo
{%         elif ethernet_interface.bfd.echo is arista.avd.defined(false) %}
   no bfd echo
{%         endif %}
{%         if ethernet_interface.ipv6_enable is arista.avd.defined(true) %}
   ipv6 enable
{%         endif %}
{%         if ethernet_interface.ipv6_address is arista.avd.defined %}
   ipv6 address {{ ethernet_interface.ipv6_address }}
{%         endif %}
{%         if ethernet_interface.ipv6_address_link_local is arista.avd.defined %}
   ipv6 address {{ ethernet_interface.ipv6_address_link_local }} link-local
{%         endif %}
{%         if ethernet_interface.ipv6_nd_ra_disabled is arista.avd.defined(true) %}
   ipv6 nd ra disabled
{%         endif %}
{%         if ethernet_interface.ipv6_nd_managed_config_flag is arista.avd.defined(true) %}
   ipv6 nd managed-config-flag
{%         endif %}
{%         if ethernet_interface.ipv6_nd_prefixes is arista.avd.defined %}
{%             for prefix in ethernet_interface.ipv6_nd_prefixes %}
{%                 set ipv6_nd_prefix_cli = "ipv6 nd prefix " ~ prefix.ipv6_prefix %}
{%                 if prefix.valid_lifetime is arista.avd.defined %}
{%                     set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " " ~ prefix.valid_lifetime %}
{%                     if prefix.preferred_lifetime is arista.avd.defined %}
{%                         set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " " ~ prefix.preferred_lifetime %}
{%                     endif %}
{%                 endif %}
{%                 if prefix.no_autoconfig_flag is arista.avd.defined(true) %}
{%                     set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " no-autoconfig" %}
{%                 endif %}
   {{ ipv6_nd_prefix_cli }}
{%             endfor %}
{%         endif %}
{%     endif %}
{%     if ethernet_interface.channel_group.id is arista.avd.defined and ethernet_interface.channel_group.mode is arista.avd.defined %}
   channel-group {{ ethernet_interface.channel_group.id }} mode {{ ethernet_interface.channel_group.mode }}
{%         if ethernet_interface.lacp_timer.mode is arista.avd.defined %}
   lacp timer {{ ethernet_interface.lacp_timer.mode }}
{%         endif %}
{%         if ethernet_interface.lacp_timer.multiplier is arista.avd.defined %}
   lacp timer multiplier {{ ethernet_interface.lacp_timer.multiplier }}
{%         endif %}
{%         if ethernet_interface.lacp_port_priority is arista.avd.defined %}
   lacp port-priority {{ ethernet_interface.lacp_port_priority }}
{%         endif %}
{%     endif %}
{%     if ethernet_interface.lldp.transmit is arista.avd.defined(false) %}
   no lldp transmit
{%     endif %}
{%     if ethernet_interface.lldp.receive is arista.avd.defined(false) %}
   no lldp receive
{%     endif %}
{%     if ethernet_interface.lldp.ztp_vlan is arista.avd.defined %}
   lldp tlv transmit ztp vlan {{ ethernet_interface.lldp.ztp_vlan }}
{%     endif %}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.mpls.ldp.igp_sync is arista.avd.defined(true) %}
   mpls ldp igp sync
{%         endif %}
{%         if ethernet_interface.mpls.ldp.interface is arista.avd.defined(true) %}
   mpls ldp interface
{%         elif ethernet_interface.mpls.ldp.interface is arista.avd.defined(false) %}
   no mpls ldp interface
{%         endif %}
{%         if ethernet_interface.access_group_in is arista.avd.defined %}
   ip access-group {{ ethernet_interface.access_group_in }} in
{%         endif %}
{%         if ethernet_interface.access_group_out is arista.avd.defined %}
   ip access-group {{ ethernet_interface.access_group_out }} out
{%         endif %}
{%         if ethernet_interface.ipv6_access_group_in is arista.avd.defined %}
   ipv6 access-group {{ ethernet_interface.ipv6_access_group_in }} in
{%         endif %}
{%         if ethernet_interface.ipv6_access_group_out is arista.avd.defined %}
   ipv6 access-group {{ ethernet_interface.ipv6_access_group_out }} out
{%         endif %}
{%         if ethernet_interface.mac_access_group_in is arista.avd.defined %}
   mac access-group {{ ethernet_interface.mac_access_group_in }} in
{%         endif %}
{%         if ethernet_interface.mac_access_group_out is arista.avd.defined %}
   mac access-group {{ ethernet_interface.mac_access_group_out }} out
{%         endif %}
{%         if ethernet_interface.multicast is arista.avd.defined %}
{%             if ethernet_interface.multicast.ipv4.boundaries is arista.avd.defined %}
{%                 for boundary in ethernet_interface.multicast.ipv4.boundaries %}
{%                     set boundary_cli = "multicast ipv4 boundary " ~ boundary.boundary %}
{%                     if boundary.out is arista.avd.defined(true) %}
{%                         set boundary_cli = boundary_cli ~ " out" %}
{%                     endif %}
   {{ boundary_cli }}
{%                 endfor %}
{%             endif %}
{%             if ethernet_interface.multicast.ipv6.boundaries is arista.avd.defined %}
{%                 for boundary in ethernet_interface.multicast.ipv6.boundaries %}
   multicast ipv6 boundary {{ boundary.boundary }} out
{%                 endfor %}
{%             endif %}
{%             if ethernet_interface.multicast.ipv4.static is arista.avd.defined(true) %}
   multicast ipv4 static
{%             endif %}
{%             if ethernet_interface.multicast.ipv6.static is arista.avd.defined(true) %}
   multicast ipv6 static
{%             endif %}
{%         endif %}
{%         if ethernet_interface.mpls.ip is arista.avd.defined(true) %}
   mpls ip
{%         elif ethernet_interface.mpls.ip is arista.avd.defined(false) %}
   no mpls ip
{%         endif %}
{%         if ethernet_interface.ospf_cost is arista.avd.defined %}
   ip ospf cost {{ ethernet_interface.ospf_cost }}
{%         endif %}
{%         if ethernet_interface.ospf_network_point_to_point is arista.avd.defined(true) %}
   ip ospf network point-to-point
{%         endif %}
{%         if ethernet_interface.ospf_authentication is arista.avd.defined('simple') %}
   ip ospf authentication
{%         elif ethernet_interface.ospf_authentication is arista.avd.defined('message-digest') %}
   ip ospf authentication message-digest
{%         endif %}
{%         if ethernet_interface.ospf_authentication_key is arista.avd.defined %}
   ip ospf authentication-key 7 {{ ethernet_interface.ospf_authentication_key }}
{%         endif %}
{%         if ethernet_interface.ospf_area is arista.avd.defined %}
   ip ospf area {{ ethernet_interface.ospf_area }}
{%         endif %}
{%         for ospf_message_digest_key in ethernet_interface.ospf_message_digest_keys | arista.avd.natural_sort('id') %}
{%             if ospf_message_digest_key.hash_algorithm is arista.avd.defined and ospf_message_digest_key.key is arista.avd.defined %}
   ip ospf message-digest-key {{ ospf_message_digest_key.id }} {{ ospf_message_digest_key.hash_algorithm }} 7 {{ ospf_message_digest_key.key }}
{%             endif %}
{%         endfor %}
{%         if ethernet_interface.pim.ipv4.sparse_mode is arista.avd.defined(true) %}
   pim ipv4 sparse-mode
{%         endif %}
{%         if ethernet_interface.pim.ipv4.dr_priority is arista.avd.defined %}
   pim ipv4 dr-priority {{ ethernet_interface.pim.ipv4.dr_priority }}
{%         endif %}
{%         if ethernet_interface.qos.trust is arista.avd.defined %}
{%             if ethernet_interface.qos.trust == 'disabled' %}
   no qos trust
{%             else %}
   qos trust {{ ethernet_interface.qos.trust }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.qos.cos is arista.avd.defined %}
   qos cos {{ ethernet_interface.qos.cos }}
{%         endif %}
{%         if ethernet_interface.qos.dscp is arista.avd.defined %}
   qos dscp {{ ethernet_interface.qos.dscp }}
{%         endif %}
{%         if ethernet_interface.shape.rate is arista.avd.defined %}
   shape rate {{ ethernet_interface.shape.rate }}
{%         endif %}
{%         if ethernet_interface.priority_flow_control.enabled is arista.avd.defined(true) %}
   priority-flow-control on
{%         elif ethernet_interface.priority_flow_control.enabled is arista.avd.defined(false) %}
   no priority-flow-control
{%         endif %}
{%         for priority_block in ethernet_interface.priority_flow_control.priorities | arista.avd.natural_sort %}
{%             if priority_block.priority is arista.avd.defined %}
{%                 if priority_block.no_drop is arista.avd.defined(true) %}
   priority-flow-control priority {{ priority_block.priority }} no-drop
{%                 elif priority_block.no_drop is arista.avd.defined(false) %}
   priority-flow-control priority {{ priority_block.priority }} drop
{%                 endif %}
{%             endif %}
{%         endfor %}
{%         for section in ethernet_interface.storm_control | arista.avd.natural_sort %}
{%             if ethernet_interface.storm_control[section].level is arista.avd.defined %}
{%                 if ethernet_interface.storm_control[section].unit is arista.avd.defined('pps') %}
   storm-control {{ section | replace("_", "-") }} level pps {{ ethernet_interface.storm_control[section].level }}
{%                 else %}
   storm-control {{ section | replace("_", "-") }} level {{ ethernet_interface.storm_control[section].level }}
{%                 endif %}
{%             endif %}
{%         endfor %}
{%         if ethernet_interface.ptp.enable is arista.avd.defined(true) %}
   ptp enable
{%         endif %}
{%         if ethernet_interface.ptp.sync_message.interval is arista.avd.defined %}
   ptp sync-message interval {{ ethernet_interface.ptp.sync_message.interval }}
{%         endif %}
{%         if ethernet_interface.ptp.delay_mechanism is arista.avd.defined %}
   ptp delay-mechanism {{ ethernet_interface.ptp.delay_mechanism }}
{%         endif %}
{%         if ethernet_interface.ptp.announce.interval is arista.avd.defined %}
   ptp announce interval {{ ethernet_interface.ptp.announce.interval }}
{%         endif %}
{%         if ethernet_interface.ptp.transport is arista.avd.defined %}
   ptp transport {{ ethernet_interface.ptp.transport }}
{%         endif %}
{%         if ethernet_interface.ptp.announce.timeout is arista.avd.defined %}
   ptp announce timeout {{ ethernet_interface.ptp.announce.timeout }}
{%         endif %}
{%         if ethernet_interface.ptp.delay_req is arista.avd.defined %}
   ptp delay-req interval {{ ethernet_interface.ptp.delay_req }}
{%         endif %}
{%         if ethernet_interface.ptp.role is arista.avd.defined %}
   ptp role {{ ethernet_interface.ptp.role }}
{%         endif %}
{%         if ethernet_interface.ptp.vlan is arista.avd.defined %}
   ptp vlan {{ ethernet_interface.ptp.vlan }}
{%         endif %}
{%         if ethernet_interface.service_policy.pbr.input is arista.avd.defined %}
   service-policy type pbr input {{ ethernet_interface.service_policy.pbr.input }}
{%         endif %}
{%         if ethernet_interface.service_profile is arista.avd.defined %}
   service-profile {{ ethernet_interface.service_profile }}
{%         endif %}
{%         if ethernet_interface.isis_enable is arista.avd.defined %}
   isis enable {{ ethernet_interface.isis_enable }}
{%         endif %}
{%         if ethernet_interface.isis_circuit_type is arista.avd.defined %}
   isis circuit-type {{ ethernet_interface.isis_circuit_type }}
{%         endif %}
{%         if ethernet_interface.isis_metric is arista.avd.defined %}
   isis metric {{ ethernet_interface.isis_metric }}
{%         endif %}
{%         if ethernet_interface.isis_passive is arista.avd.defined(true) %}
   isis passive
{%         endif %}
{%         if ethernet_interface.isis_hello_padding is arista.avd.defined(false) %}
   no isis hello padding
{%         elif ethernet_interface.isis_hello_padding is arista.avd.defined(true) %}
   isis hello padding
{%         endif %}
{%         if ethernet_interface.isis_network_point_to_point is arista.avd.defined(true) %}
   isis network point-to-point
{%         endif %}
{%         if ethernet_interface.isis_authentication_mode is arista.avd.defined and
              ethernet_interface.isis_authentication_mode in ["text", "md5"] %}
   isis authentication mode {{ ethernet_interface.isis_authentication_mode }}
{%         endif %}
{%         if ethernet_interface.isis_authentication_key is arista.avd.defined %}
   isis authentication key 7 {{ ethernet_interface.isis_authentication_key }}
{%         endif %}
{%         if ethernet_interface.spanning_tree_portfast is arista.avd.defined('edge') %}
   spanning-tree portfast
{%         elif ethernet_interface.spanning_tree_portfast is arista.avd.defined('network') %}
   spanning-tree portfast network
{%         endif %}
{%         if ethernet_interface.spanning_tree_bpduguard is arista.avd.defined and ethernet_interface.spanning_tree_bpduguard in [True, "True", "enabled"] %}
   spanning-tree bpduguard enable
{%         elif ethernet_interface.spanning_tree_bpduguard is arista.avd.defined("disabled") %}
   spanning-tree bpduguard disable
{%         endif %}
{%         if ethernet_interface.spanning_tree_bpdufilter is arista.avd.defined and ethernet_interface.spanning_tree_bpdufilter in [True, "True", "enabled"] %}
   spanning-tree bpdufilter enable
{%         elif ethernet_interface.spanning_tree_bpdufilter is arista.avd.defined("disabled") %}
   spanning-tree bpdufilter disable
{%         endif %}
{%         if ethernet_interface.spanning_tree_guard is arista.avd.defined %}
{%             if ethernet_interface.spanning_tree_guard == 'disabled' %}
   spanning-tree guard none
{%             else %}
   spanning-tree guard {{ ethernet_interface.spanning_tree_guard }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.vmtracer is arista.avd.defined(true) %}
   vmtracer vmware-esx
{%         endif %}
{%     endif %}
{%     if ethernet_interface.transceiver.media.override is arista.avd.defined %}
   transceiver media override {{ ethernet_interface.transceiver.media.override }}
{%     endif %}
{%     for link_tracking_group in ethernet_interface.link_tracking_groups | arista.avd.natural_sort %}
{%         if link_tracking_group.name is arista.avd.defined and link_tracking_group.direction is arista.avd.defined %}
   link tracking group {{ link_tracking_group.name }} {{ link_tracking_group.direction }}
{%         endif %}
{%     endfor %}
{%     if ethernet_interface.traffic_policy.input is arista.avd.defined %}
   traffic-policy input {{ ethernet_interface.traffic_policy.input }}
{%     endif %}
{%     if ethernet_interface.traffic_policy.output is arista.avd.defined %}
   traffic-policy output {{ ethernet_interface.traffic_policy.output }}
{%     endif %}
{%     if ethernet_interface.eos_cli is arista.avd.defined %}
   {{ ethernet_interface.eos_cli | indent(3, false) }}
{%     endif %}
{% endfor %}
